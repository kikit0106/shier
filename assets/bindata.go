// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/sql/001_create_users_table.sql
// assets/sql/002_create_roles_table.sql
// assets/sql/003_create_user_role_table.sql

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAssetsSql001createuserstablesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\xcd\x4e\x83\x40\x14\xc5\xf1\xfd\x3c\xc5\xd9\x55\xa3\x3c\x41\x57" +
	"\x68\xc7\x84\x08\x2d\xc2\x90\xb4\xab\x66\x64\xae\xf6\x46\x18\x26\x33\x43\xf0\xf1\x0d\x1a\xb1\xf1\x23\x71\x7b\xff" +
	"\xf7\x6c\x7e\x49\x82\xab\x9e\x9f\xbd\x8e\x84\xc6\x89\x24\x41\xfd\x90\x83\x2d\x02\xb5\x91\x07\x8b\x55\xe3\x56\xe0" +
	"\x00\x7a\xa5\x76\x8c\x64\x30\x9d\xc8\x22\x9e\x38\xe0\x63\x37\x3f\x71\x80\x76\xae\x63\x32\xe2\xb6\x92\xa9\x92\x50" +
	"\xe9\x4d\x2e\x91\xdd\x61\xbb\x53\x90\xfb\xac\x56\x35\xc6\x40\x3e\xe0\x42\x00\x6c\x50\xcb\x2a\x4b\xf3\xf7\xbc\x6d" +
	"\xf2\x1c\x65\x95\x15\x69\x75\xc0\xbd\x3c\x5c\x0b\xe0\x89\x7d\x88\x47\xab\x7b\x82\x92\x7b\xb5\xfc\xcd\xad\xd3\x7f" +
	"\x26\xea\x35\x77\x3f\xcf\x4e\x87\x30\x0d\xde\x7c\x2b\x00\x20\x80\xd6\x93\x8e\x64\x8e\x3a\x42\x65\x85\xac\x55\x5a" +
	"\x94\xcb\x74\x74\xe6\xf7\x28\x2e\xd7\x80\x10\xe7\x80\x9b\x61\xb2\x9f\x84\x8b\xdf\x7c\xfc\x97\xa0\x1f\xba\x8e\x0c" +
	"\x1e\x75\xfb\x22\x36\xd5\xae\xfc\x32\x3c\xf7\x5b\xbf\x05\x00\x00\xff\xff\xb0\x50\xbf\x76\xb2\x01\x00\x00")

func bindataAssetsSql001createuserstablesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsSql001createuserstablesql,
		"assets/sql/001_create_users_table.sql",
	)
}



func bindataAssetsSql001createuserstablesql() (*asset, error) {
	bytes, err := bindataAssetsSql001createuserstablesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/sql/001_create_users_table.sql",
		size: 434,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1556081151, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAssetsSql002createrolestablesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\xcd\x4e\x02\x31\x14\xc5\xf1\xfd\x7d\x8a\xb3\x43\x23\xf3\x04\xac" +
	"\x46\xa9\x49\xe3\x30\x0c\xfd\x48\x60\x65\xea\xf4\x46\x1a\x87\x4e\x33\x2d\xc1\xc7\x37\x48\x44\x16\x2e\xdc\xde\xff" +
	"\xb9\x8b\x5f\x55\xe1\xe1\x10\xde\x27\x57\x18\x36\x51\x55\x41\x6f\x1a\x84\x88\xcc\x7d\x09\x63\xc4\xcc\xa6\x19\x42" +
	"\x06\x7f\x72\x7f\x2c\xec\x71\xda\x73\x44\xd9\x87\x8c\xcb\xdf\x79\x14\x32\x5c\x4a\x43\x60\x4f\x4f\x4a\xd4\x46\xc0" +
	"\xd4\x8f\x8d\x80\x7c\x46\xbb\x36\x10\x5b\xa9\x8d\xc6\x34\x0e\x9c\x71\x47\x40\xf0\xd0\x42\xc9\xba\xf9\xce\xad\x6d" +
	"\x1a\x74\x4a\xae\x6a\xb5\xc3\x8b\xd8\xcd\x09\x88\xee\xc0\x30\x62\x6b\x60\x5b\xb9\xb1\xe2\x3a\x9c\x03\x04\xf4\x13" +
	"\xbb\xc2\xfe\xd5\x15\x18\xb9\x12\xda\xd4\xab\xee\x92\x09\x38\x26\xff\x77\xa4\xfb\x05\x40\x74\x6b\x5e\x8e\xa7\xf8" +
	"\xa3\xbe\x92\xcf\xc7\x7f\xa1\xa7\x71\x18\xd8\xe3\xcd\xf5\x1f\xb4\x54\xeb\xee\x97\x7d\x4b\x5e\xd0\x57\x00\x00\x00" +
	"\xff\xff\xfe\x7f\x34\x9c\x66\x01\x00\x00")

func bindataAssetsSql002createrolestablesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsSql002createrolestablesql,
		"assets/sql/002_create_roles_table.sql",
	)
}



func bindataAssetsSql002createrolestablesql() (*asset, error) {
	bytes, err := bindataAssetsSql002createrolestablesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/sql/002_create_roles_table.sql",
		size: 358,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556081073, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAssetsSql003createuserroletablesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x8e\x9b\x30\x18\x84\xef\x7e\x8a\xb9\x6d\xa2\x2e\x4f\xb0\x27" +
	"\x0a\x4e\x6b\x15\x0c\x35\x46\xea\x9e\x10\xc5\x7f\x13\x6b\x09\x20\x30\x4a\xdb\xa7\xaf\x4c\xc8\x26\xaa\x12\xa9\x52" +
	"\x7d\xf3\xcc\xfc\xbf\x3e\x5b\x13\x04\xf8\x70\xb4\xfb\xb1\x76\x84\x72\x60\x41\x80\xe2\x6b\x02\xdb\x61\xa2\xc6\xd9" +
	"\xbe\xc3\x53\x39\x3c\xc1\x4e\xa0\x9f\xd4\xcc\x8e\x0c\x4e\x07\xea\xe0\x0e\x76\xc2\x79\xce\x87\xec\x84\x7a\x18\x5a" +
	"\x4b\x86\x45\x8a\x87\x9a\x43\x87\x1f\x13\x0e\xb1\x83\xcc\x34\xf8\x37\x51\xe8\x02\xf3\x44\x63\x35\xf6\x2d\x61\x03" +
	"\x30\x9c\xef\xd6\xc0\x76\x8e\xf6\x34\x2e\x51\x59\x26\xc9\x33\x03\x7c\xec\x91\xb7\x1f\xeb\xce\x55\xc6\x23\x3b\x7b" +
	"\xa4\xc9\xd5\xc7\x01\x27\xeb\x0e\xfd\xec\x16\x05\xbf\xfb\x8e\x7c\xb2\x19\xa9\x76\x64\xaa\xda\x41\x8b\x94\x17\x3a" +
	"\x4c\xf3\xf7\x35\xf3\x60\x1e\x9b\xb9\x12\x69\xa8\x5e\xf1\x85\xbf\x62\xb3\x82\x3e\x5f\xa8\xb6\x3e\x11\x65\xb2\xd0" +
	"\x2a\x14\x52\x5f\x1f\x56\xad\x81\xea\xc7\x1b\xfd\xc2\x2e\x53\x5c\x7c\x92\xe7\x1d\x97\x51\x86\xe5\x28\xbe\xe3\x8a" +
	"\xcb\x88\x17\xcb\xd2\x09\x1b\x6b\xb6\x48\x43\x1d\x7d\x46\x21\xd2\x3c\xe1\x6b\x30\x93\x28\xf3\xd8\x7f\xa9\xcc\x10" +
	"\x46\x5a\x64\xd2\x6b\x31\x4f\xf8\xad\xf6\x90\x68\x65\xbf\x43\xb4\x3a\x77\x88\xbc\xf3\xdf\x44\x6c\xfb\xc2\xd8\x6d" +
	"\xbd\xe2\xfe\xd4\x5d\x0a\xf6\xde\x2e\x2f\xfe\x53\xbf\xc6\xbe\x6d\xc9\xe0\x7b\xdd\xbc\xb1\x58\x65\xf9\xb5\x61\x7f" +
	"\xb7\xeb\x85\xfd\x09\x00\x00\xff\xff\x7b\xeb\xbf\x65\xd5\x02\x00\x00")

func bindataAssetsSql003createuserroletablesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsSql003createuserroletablesql,
		"assets/sql/003_create_user_role_table.sql",
	)
}



func bindataAssetsSql003createuserroletablesql() (*asset, error) {
	bytes, err := bindataAssetsSql003createuserroletablesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/sql/003_create_user_role_table.sql",
		size: 725,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556081054, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"assets/sql/001_create_users_table.sql":     bindataAssetsSql001createuserstablesql,
	"assets/sql/002_create_roles_table.sql":     bindataAssetsSql002createrolestablesql,
	"assets/sql/003_create_user_role_table.sql": bindataAssetsSql003createuserroletablesql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"assets": {Func: nil, Children: map[string]*bintree{
		"sql": {Func: nil, Children: map[string]*bintree{
			"001_create_users_table.sql": {Func: bindataAssetsSql001createuserstablesql, Children: map[string]*bintree{}},
			"002_create_roles_table.sql": {Func: bindataAssetsSql002createrolestablesql, Children: map[string]*bintree{}},
			"003_create_user_role_table.sql": {Func: bindataAssetsSql003createuserroletablesql, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
